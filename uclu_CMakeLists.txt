# cmake needs this line
cmake_minimum_required(VERSION 3.8 FATAL_ERROR)
project(cmake_and_cuda LANGUAGES CXX CUDA)

# Define project name
project( try1 )

# Set Executable Name
set(bin_out_name try1)

# Set Cuda Compiled functions
add_library(cuda_lib STATIC 
	cudaDeneme.cu
	)

# Add -std=c++11 to all cuda compiled code
target_compile_features(cuda_lib PUBLIC cxx_std_11)

# Set Seperate Compilation for cuda functions
set_target_properties( cuda_lib
                       PROPERTIES CUDA_SEPARABLE_COMPILATION ON
                      )
	

# Find OpenCV, you may need to set OpenCV_DIR variable
# to the absolute path to the directory containing OpenCVConfig.cmake file
# via the command line or GUI
find_package( OpenCV REQUIRED )


add_executable( ${bin_out_name} gstreamer_view.cpp )
set_target_properties(${bin_out_name} PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
target_link_libraries(${bin_out_name} PRIVATE cuda_lib)
include_directories(/usr/local/cuda-9.0/samples/common/inc)
include_directories(/usr/local/cuda-9.0/targets/aarch64-linux/include/)
#include_directories(/usr/local/cuda-9.0/samples/7_CUDALibraries/common/UtilNPP)
#include_directories(/usr/local/cuda-9.0/samples/7_CUDALibraries/common/FreeImage/include)
#include_directories(/usr/local/cuda-9.0/samples/7_CUDALibraries/common/FreeImage/lib/linux/aarch64)
#include_directories(/usr/local/cuda-9.0/targets/aarch64-linux/include)

# If the package has been found, several variables will
# be set, you can find the full list with descriptions
# in the OpenCVConfig.cmake file.
# Print some message showing some of them
message(STATUS "OpenCV library status:")
message(STATUS "    version: ${OpenCV_VERSION}")
message(STATUS "    libraries: ${OpenCV_LIBS}")
message(STATUS "    include path: ${OpenCV_INCLUDE_DIRS}")

if(CMAKE_VERSION VERSION_LESS "2.8.11")
  # Add OpenCV headers location to your include paths
  include_directories(${OpenCV_INCLUDE_DIRS})
endif()

# Link OpenCV Libraries
target_link_libraries( ${bin_out_name} PUBLIC ${OpenCV_LIBS} )
#target_link_libraries( ${bin_out_name} PUBLIC libfreeimage.a )

# Set OpenCV Compiler Flag
target_compile_options(${bin_out_name} PUBLIC -std=c++11)


# OpenMP 
find_package(OpenMP)
if (OpenMP_CXX_FOUND)
target_compile_options(${bin_out_name} PRIVATE -Wall ${OpenMP_CXX_FLAGS})
target_link_libraries(${bin_out_name} PRIVATE ${OpenMP_CXX_FLAGS})
endif()


find_package(CUDA)

target_compile_options(${bin_out_name} PRIVATE -Wall ${CMAKE_CXX_FLAGS})
target_link_libraries(${bin_out_name} PRIVATE ${CMAKE_CXX_FLAGS})


